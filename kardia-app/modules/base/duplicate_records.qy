$Version=2$
update_descriptives_new "system/query"
    {
    partner "query/parameter" { type=string; style=strnull; }
    
    //PURPOSE: return a table contining the primary keys of any "duplicate record". A
    //          "duplicate record" is two entries of the same phone/email/address for the
    //          same person (same partner_key)
    //TABLE STRUCTURE:
    //   --------------------------------------------------------------------------------------------------------------------------------------------------------------
    //   | type  | p_partner_key_1  | p_location_id_1  | p_revision_id_1  | p_contact_id_1 | p_partner_key_2  | p_location_id_2  | p_revision_id_2  | p_contact_id_2  |
    //
    // where type is one of 'C', 'L' [later possibly extended to 'P']
    // and each indicates the table for which we have the primary keys:
    //  p_contact_info (partner key, contact id)
    //  p_location (partner key, location id, revision id)
    //  p_partner (partner key)

    //TODO: do we need an application-scope table or not? Yes if adding the duplicate people
    //      (different partner_keys) to the same table, probably no otherwise
    sql = " 
	-- Create a temporary collection
	    declare collection tmp_pcl_duplicates scope application;

        --insert duplicate contact records
	    insert
		collection tmp_pcl_duplicates
	    select
        type = :c1:p_contact_type,
        p_partner_key_1 = :c1:p_partner_key,
        p_location_id_1 = 'NULL',
        p_revision_id_1 = 'NULL',
        p_contact_id_1 = :c1:p_contact_id,
        p_partner_key_2 = :c2:p_partner_key,
        p_location_id_2 = 'NULL',
        p_revision_id_2 = 'NULL',
        p_contact_id_2 = :c2:p_contact_id

        from
        /apps/kardia/data/Kardia_DB/p_contact_info/rows c1,
        /apps/kardia/data/Kardia_DB/p_contact_info/rows c2
        where
        :c1:p_partner_key = :c2:p_partner_key and
        lower(replace(replace(replace(replace(replace
                (isnull(:c1:p_phone_country,'') + isnull(:c1:p_phone_area_city,'') + isnull(:c1:p_contact_data,''), 
                        '(', ''), ')', ''), '-', ''), '.', ''), ' ', ''))
            =
        lower(replace(replace(replace(replace(replace
                (isnull(:c2:p_phone_country,'') + isnull(:c2:p_phone_area_city,'') + isnull(:c2:p_contact_data,''), 
                        '(', ''), ')', ''), '-', ''), '.', ''), ' ', ''))
        and
        :c1:p_contact_id < :c2:p_contact_id
        ;

        --insert duplicate location records
        insert
		collection tmp_pcl_duplicates
	    select
        type = :l1:p_location_type,
        p_partner_key_1 = :l1:p_partner_key,
        p_location_id_1 = :l1:p_location_id,
        p_revision_id_1 = :l1:p_revision_id,
        p_contact_id_1 = 'NULL',
        p_partner_key_2 = :l2:p_partner_key,
        p_location_id_2 = :l2:p_location_id,
        p_revision_id_2 = :l2:p_revision_id,
        p_contact_id_2 = 'NULL'
        from
        /apps/kardia/data/Kardia_DB/p_location/rows l1,
        /apps/kardia/data/Kardia_DB/p_location/rows l2
        where
        :l1:p_partner_key = :l2:p_partner_key and
        lower(replace(replace(replace(isnull(:l1:p_address_1, ''), ',', ''), '.', ''), ' ', ''))
                 = lower(replace(replace(replace(isnull(:l2:p_address_1, ''), ',', ''), '.', ''), ' ', ''))
        and
        ( 
          :l1:p_location_id < :l2:p_location_id or
          :l1:p_revision_id < :l2:p_revision_id
        )
        --;
        -- Return the dataset to the caller
        --select * from collection tmp_pcl_duplicates
    ";
    }