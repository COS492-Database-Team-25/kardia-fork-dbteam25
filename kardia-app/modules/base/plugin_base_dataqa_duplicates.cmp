$Version=2$
plugin_base_dataqa_duplicates "widget/component-decl"
    {
    width=958;
    height=633;
    title="Duplicate Management";
    sequence=100;

    ledger "widget/parameter" { type=string; default=null; deploy_to_client=yes; }

    MergeRequest "widget/component-decl-event" { }

    notadup_osrc "widget/osrc"
	{
	partner1 "widget/parameter" { type=string; }
	partner2 "widget/parameter" { type=string; }
	comment "widget/parameter" { type=string; }

	sql = "	insert into
		    /apps/kardia/data/Kardia_DB/p_nondup/rows nd
		select
		    p_partner_key = :parameters:partner1,
		    p_nondup_partner_key = :parameters:partner2,
		    p_comment = :parameters:comment,
		    s_date_created = getdate(),
		    s_created_by = user_name(),
		    s_date_modified = getdate(),
		    s_modified_by = user_name()
		;
		
		select
		    comment = 'created'
		";
	readahead=2;
	replicasize=2;
	autoquery=never;

	on_created "widget/connector" { event=EndQuery; target=dupsform; action=Delete; }
	}

    dups_vbox "widget/vbox"
	{
	x=0; y=0;
	width=958;
	height=633;
	spacing=10;

	dupslbl "widget/component"
	    {
	    path="/apps/kardia/modules/base/section_label.cmp";
	    height=26;
	    fl_height=0;
	    text = runclient("Potential Duplicate Partners...");
	    }

	dupsosrc "widget/osrc"
	    {
	    showobs "widget/parameter" { type=integer; default=runclient(:show_obs:value); }
	    showassoc "widget/parameter" { type=integer; default=runclient(:show_assoc:value); }
	    showrel "widget/parameter" { type=integer; default=runclient(:show_rel:value); }
	    showmerge "widget/parameter" { type=integer; default=runclient(:show_merge:value); }
	    do_query "widget/parameter" { type=string; param_name=query; }

	    sql = " declare collection rels scope application;
		    declare collection reltype scope application;
		    declare object info;

		    delete from collection rels;
		    delete from collection reltype;
		    
		    insert
			collection reltype
		    select
			:p_relation_type,
			:p_relation_type_label,
			:p_relation_type_rev_label
		    from
			/apps/kardia/data/Kardia_DB/p_partner_relationship_type/rows
		    ;

		    insert
			collection rels
		    select
			:p_partner_key,
			:p_relation_key,
			:p_relation_type
		    from
			/apps/kardia/data/Kardia_DB/p_partner_relationship/rows
		    ;

		    select
			:info:partnerlist = NULL
		    ;

		    select
			:info:partnerlist = condition(
						char_length(:parameters:query) >= 3,
						isnull(sum(:p_partner_key + ',') - ',', ''),
						null
					    )
		    from
			/apps/kardia/data/Kardia_DB/p_partner/rows p
		    where
			(charindex(upper(:parameters:query), upper(:p_given_name)) > 0 or
			 charindex(upper(:parameters:query), upper(:p_surname)) > 0 or
			 charindex(upper(:parameters:query), upper(:p_preferred_name)) > 0 or
			 charindex(upper(:parameters:query), upper(:p_org_name)) > 0) and
			char_length(:parameters:query) >= 3
		    ;

		    select
			:d:p_partner_key,
			:d:p_dup_partner_key,
			:d:p_match_quality,
			--match = convert(integer, round(:d:p_match_quality * 100)),
			match = round(:d:p_match_quality, 3),
			disp_name_1 = condition(char_length(rtrim(:p1:p_org_name)) > 0, :p1:p_org_name + ' ' + condition(char_length(:p1:p_given_name + :p1:p_surname) > 0, '- ', ''), '') + isnull(:p1:p_given_name + ' ','') + isnull(:p1:p_surname + ' ',''),
			disp_name_2 = condition(char_length(rtrim(:p2:p_org_name)) > 0, :p2:p_org_name + ' ' + condition(char_length(:p2:p_given_name + :p2:p_surname) > 0, '- ', ''), '') + isnull(:p2:p_given_name + ' ','') + isnull(:p2:p_surname + ' ',''),
			stat_1 = :p1:p_status_code,
			stat_2 = :p2:p_status_code,
			--loc_1 = :l1:p_city + ', ' + :l1:p_state_province,
			--loc_2 = :l2:p_city + ', ' + :l2:p_state_province,
			--contact_1 = isnull(:c1:p_phone_country + ' ','') + isnull(:c1:p_phone_area_city + ' ','') + isnull(:c1:p_contact_data,''),
			--contact_2 = isnull(:c2:p_phone_country + ' ','') + isnull(:c2:p_phone_area_city + ' ','') + isnull(:c2:p_contact_data,''),
			ploc_1 = substitute(isnull(:af1:p_format, '[:p_in_care_of]\n[:p_address_1]\n[:p_address_2]\n[:p_address_3]\n[:p_city], [:p_state_province] [:p_postal_code]\n[:p_country_name]'), 'l=pl1,p=p1,ctry1'),
			ploc_2 = substitute(isnull(:af2:p_format, '[:p_in_care_of]\n[:p_address_1]\n[:p_address_2]\n[:p_address_3]\n[:p_city], [:p_state_province] [:p_postal_code]\n[:p_country_name]'), 'l=pl2,p=p2,ctry2'),
			type = condition(:d:p_partner_key != :d:p_dup_partner_key, 'Duplicate Partner', condition(:d:p_contact_id is not null, 'Duplicate Contact',  condition(:d:p_location_id is not null, 'Duplicate Address', ''))),
			nondup = condition(:nd:p_partner_key is not null, 1, 0),
			associated = condition(:p1:p_parent_key = :p2:p_partner_key or :p1:p_partner_key = :p2:p_parent_key or :p1:p_parent_key = :p2:p_parent_key, 1, 0),
			merged = condition(:p1:p_merged_with = :p2:p_partner_key or :p1:p_partner_key = :p2:p_merged_with, 1, 0),
			relation = (select condition(:r:p_partner_key = :d:p_partner_key, :rt:p_relation_type_label + '/' + :rt:p_relation_type_rev_label, :rt:p_relation_type_rev_label + '/' + :rt:p_relation_type_label) from collection rels r, collection reltype rt where ((:r:p_partner_key = :d:p_partner_key and :r:p_relation_key = :d:p_dup_partner_key) or (:r:p_partner_key = :d:p_dup_partner_key and :r:p_relation_key = :d:p_partner_key)) and :rt:p_relation_type = :r:p_relation_type )
		    from
			identity /apps/kardia/data/Kardia_DB/p_dup/rows d,
			/apps/kardia/data/Kardia_DB/p_partner/rows p1,
			/apps/kardia/data/Kardia_DB/p_partner/rows p2,
			--/apps/kardia/data/Kardia_DB/p_location/rows l1,
			--/apps/kardia/data/Kardia_DB/p_location/rows l2,
			--/apps/kardia/data/Kardia_DB/p_contact_info/rows c1,
			--/apps/kardia/data/Kardia_DB/p_contact_info/rows c2,
			/apps/kardia/data/Kardia_DB/p_location/rows pl1,
			/apps/kardia/data/Kardia_DB/p_location/rows pl2,
			/apps/kardia/data/Kardia_DB/p_country/rows ctry1,
			/apps/kardia/data/Kardia_DB/p_address_format/rows af1,
			/apps/kardia/data/Kardia_DB/p_country/rows ctry2,
			/apps/kardia/data/Kardia_DB/p_address_format/rows af2,
			/apps/kardia/data/Kardia_DB/p_nondup/rows nd
		    where
			(:info:partnerlist is null or charindex(',' + rtrim(:d:p_partner_key) + ',', ',' + :info:partnerlist + ',') > 0 or charindex(',' + rtrim(:d:p_dup_partner_key) + ',', ',' + :info:partnerlist + ',') > 0) and
			:p1:p_partner_key = :d:p_partner_key and
			:p2:p_partner_key = :d:p_dup_partner_key and
			--:l1:p_partner_key =* :d:p_partner_key and
			--:l1:p_location_id =* :d:p_location_id and
			--:l1:p_revision_id =* :d:p_revision_id and
			--:l2:p_partner_key =* :d:p_dup_partner_key and
			--:l2:p_location_id =* :d:p_dup_location_id and
			--:l2:p_revision_id =* :d:p_dup_revision_id and
			--:c1:p_partner_key =* :d:p_partner_key and
			--:c1:p_contact_id =* :d:p_contact_id and
			--:c2:p_partner_key =* :d:p_dup_partner_key and
			--:c2:p_contact_id =* :d:p_dup_contact_id and
			:pl1:p_partner_key =* :d:p_partner_key and
			:pl2:p_partner_key =* :d:p_dup_partner_key and
			:pl1:p_country_code *= :ctry1:p_country_code and
			:af1:p_country_code =* :ctry1:p_country_code and
			:af1:p_address_set = 'STANDARD' and
			:pl2:p_country_code *= :ctry2:p_country_code and
			:af2:p_country_code =* :ctry2:p_country_code and
			:af2:p_address_set = 'STANDARD' and
			:nd:p_partner_key =* :d:p_partner_key and
			:nd:p_nondup_partner_key =* :p_dup_partner_key
		    group by
			:d:p_match_quality desc,
			:d:p_partner_key,
			:d:p_dup_partner_key
		    order by
			:d:p_match_quality desc
		    having
			:nondup = 0 and
			(:parameters:showassoc or not :associated) and
			(:parameters:showrel or :relation is null) and
			(:parameters:showmerge or not :merged) and
			(:parameters:showobs or (:stat_1 != 'O' and :stat_2 != 'O'))
		    ";
	    replicasize=100;
	    readahead=100;
	    autoquery=onfirstreveal;
	    autoquery_method=refresh;
	    send_updates=no;

	    dupsform "widget/form"
		{
		confirm_delete = no;
		}

	    dupstable "widget/table"
		{
		height=550;
		titlebar=no;
		overlap_scrollbar=yes;
		demand_scrollbar=yes;
		rowheight=null;
		cellvspacing=4;
		inner_padding=2;
		colsep=0;
		row_border_radius=6;
		row_shadow_radius=2;
		row_shadow_offset=1;
		row_shadow_color="#a0a0a0";
		row_shadow_angle=135;
		nodata_message="(no duplicates to show)";

		//t_match "widget/table-column" { title="%"; value=runclient(:dupsosrc:match + '%'); width=60; style=bold; }
		t_match "widget/table-column" { width=80; title = "%"; type=progress; padding=4; style=bold; fieldname=match; bar_color=runclient(condition(:dupsosrc:match >= 0.90, '#59b550', condition(:dupsosrc:match < 0.80, '#d96066', '#DDB261'))); bar_padding=3; bar_textcolor=black; }
		t_type "widget/table-column" { title="%"; value=runclient(:dupsosrc:type + condition(:dupsosrc:merged, '\nAlready Merged', '') + condition(:dupsosrc:associated, '\nAssociated', '') + condition(:dupsosrc:relation is not null, '\nRelated: ' + :dupsosrc:relation, '')); width=180; style=bold; align=center; wrap=yes; }
		t_par2 "widget/table-column" { title="Partner"; value=runclient(:dupsosrc:p_dup_partner_key + ' ' + :dupsosrc:disp_name_2); width=250; style=bold; caption_value=runclient(isnull(:dupsosrc:ploc_2 + '\n', '') + condition(:dupsosrc:stat_2 = 'O', '(obsolete)', '') - '\n'); wrap=yes; }
		t_par1 "widget/table-column" { title="Partner"; value=runclient(condition(:dupsosrc:p_partner_key = :dupsosrc:p_dup_partner_key, '', :dupsosrc:p_partner_key + ' ' + :dupsosrc:disp_name_1)); width=250; style=bold; caption_value=runclient(condition(:dupsosrc:p_partner_key = :dupsosrc:p_dup_partner_key, '', isnull(:dupsosrc:ploc_1 + '\n', '') + condition(:dupsosrc:stat_1 = 'O', '(obsolete)', '') - '\n')); wrap=yes; }

		ops_detail "widget/table-row-detail"
		    {
		    height=40;

		    ops_hbox "widget/hbox"
			{
			x=0; y=11; height=24; width=958;
			align=center;
			spacing=10;

			view_1 "widget/textbutton"
			    {
			    width=160; height=24;
			    text = runclient("View Partner " + :dupsosrc:p_dup_partner_key);

			    on_view_1 "widget/connector"
				{
				event=Click;
				target=plugin_base_dataqa_duplicates;
				action=Launch;
				Multi = 1;
				Source = runclient("/apps/kardia/modules/base/partner_window.app");
				Width=844;
				Height=600;
				id=runclient(:dupsosrc:p_dup_partner_key);
				ledger=runclient(:ledger:value);
				}
			    }

			view_2 "widget/textbutton"
			    {
			    width=160; height=24;
			    text = runclient(condition(:dupsosrc:p_partner_key != :dupsosrc:p_dup_partner_key, "View Partner " + :dupsosrc:p_partner_key, "View Partner ..."));
			    enabled=runclient(:dupsosrc:p_partner_key != :dupsosrc:p_dup_partner_key);

			    on_view_2 "widget/connector"
				{
				event=Click;
				target=plugin_base_dataqa_duplicates;
				action=Launch;
				Multi = 1;
				Source = runclient("/apps/kardia/modules/base/partner_window.app");
				Width=844;
				Height=600;
				id=runclient(:dupsosrc:p_partner_key);
				ledger=runclient(:ledger:value);
				}
			    }
			    
			notadup "widget/textbutton"
			    {
			    width=160; height=24;
			    text = runclient("Not a Duplicate");
			    enabled = runclient(:dupsosrc:p_partner_key != :dupsosrc:p_dup_partner_key);

			    on_notadup "widget/connector" { event=Click; target=popover_ask_comment; action=Open; IsModal = 1; }
			    }
			    
			merge "widget/textbutton"
			    {
			    width=160; height=24;
			    text = runclient("Merge / Relate...");
			    enabled = runclient(:dupsosrc:p_partner_key != :dupsosrc:p_dup_partner_key);

			    on_merge "widget/connector" { event=Click; target=plugin_base_dataqa_duplicates; action=MergeRequest; partner_a=runclient(:dupsosrc:p_dup_partner_key); partner_b=runclient(:dupsosrc:p_partner_key); }
			    }
			}
		    }
		}

	    sep "widget/pane" { height=2; style=lowered; fl_height=0; }

	    ctls_hbox "widget/hbox"
		{
		height=24;
		spacing=20;

		search "widget/component"
		    {
		    width=300;
		    path="/apps/kardia/modules/base/field_search.cmp";
		    empty_description="search for duplicates";

		    on_search "widget/connector"
			{
			event=Search;
			event_condition=runclient(char_length(:query) = 0 or char_length(:query) >= 3);
			target=dupsosrc;
			action=QueryParam;
			query=runclient(:query);
			}
		    }

		checkbox_hbox "widget/hbox"
		    {
		    spacing=20;
		    align=right;
		    width=638;

		    show_obs "widget/component"
			{
			width=120;
			path="/sys/cmp/smart_field.cmp";
			ctl_type=checkboxleft;
			text="Show Obsolete";
			so_hints "widget/hints" { style=notnull; default=0; }

			on_obs_change "widget/connector" { event=DataChange; target=dupsosrc; action=Refresh; }
			}

		    show_assoc "widget/component"
			{
			width=130;
			path="/sys/cmp/smart_field.cmp";
			ctl_type=checkboxleft;
			text="Show Associated";
			sa_hints "widget/hints" { style=notnull; default=0; }

			on_assoc_change "widget/connector" { event=DataChange; target=dupsosrc; action=Refresh; }
			}

		    show_rel "widget/component"
			{
			width=115;
			path="/sys/cmp/smart_field.cmp";
			ctl_type=checkboxleft;
			text="Show Related";
			sr_hints "widget/hints" { style=notnull; default=0; }

			on_rel_change "widget/connector" { event=DataChange; target=dupsosrc; action=Refresh; }
			}

		    show_merge "widget/component"
			{
			width=115;
			path="/sys/cmp/smart_field.cmp";
			ctl_type=checkboxleft;
			text="Show Merged";
			sm_hints "widget/hints" { style=notnull; default=0; }

			on_merge_change "widget/connector" { event=DataChange; target=dupsosrc; action=Refresh; }
			}
		    }
		}
	    }
	}

    popover_ask_comment "widget/childwindow"
	{
	width=350; height=120;
	x=315; y=220;
	titlebar=no;
	visible=no;
	border_style=solid;
	border_color="#f8f8f8";
	background=null;
	bgcolor="#f8f8f8";
	border_radius=12;
	shadow_radius=4;
	shadow_offset=2;
	shadow_color="#808080";
	shadow_angle=135;

	nondup_open_pac1 "widget/connector" { event = Open; target = f_pac_comm; action = SetFocus; }

	pac_vbox "widget/vbox"
	    {
	    x=10; y=10; width=330; height=100;
	    spacing=10;

	    pac_title "widget/label" { height=20; align=center; font_size=16; style=bold; text="Mark as Non-Duplicate:"; }

	    pac_form "widget/form"
		{
		allow_new = yes;

		f_pac_comm "widget/component" { height=20; path="/sys/cmp/smart_field.cmp"; label_width=100; text='Comment:'; field='comm'; ctl_type=editbox; }

		pac_save "widget/connector" { event=BeforeSave; target=pac_ok; action=Click; event_cancel=runclient(1); }
		pac_discard "widget/connector" { event=Discard; target=popover_ask_comment; action=Close; }
		}

	    pac_sep "widget/autolayoutspacer" { height=1; }

	    pac_ctls "widget/hbox"
		{
		height=24;
		spacing=10;
		align=center;

		pac_ok "widget/textbutton"
		    {
		    height=24;
		    width=130;
		    text = "Mark Non-dup";

		    do_nondup1 "widget/connector"
			{
			event=Click;
			target=notadup_osrc;
			action=QueryParam;
			partner1=runclient(:dupsosrc:p_partner_key);
			partner2=runclient(:dupsosrc:p_dup_partner_key);
			comment=runclient(:f_pac_comm:content);
			}

		    do_nondup2 "widget/connector" { event=Click; target=pac_form; action=Discard; }
		    }

		pac_cancel "widget/textbutton"
		    {
		    height=24;
		    width=130;
		    text = "Cancel";

		    do_nondup_cancel1 "widget/connector" { event=Click; target=pac_form; action=Discard; }
		    }
		}
	    }
	}
    }
