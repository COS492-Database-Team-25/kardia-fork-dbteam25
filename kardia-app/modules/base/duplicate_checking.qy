$Version=2$
update_descriptives_new "system/query"
    {
    partner "query/parameter" { type=string; style=strnull; }
    sql = " 
	-- Create a temporary collection containing partner data
	    declare collection tmp_partner_data scope query;
	    declare collection tmp_partner_condensed scope query;
	    declare collection tmp_partner_pairs scope query;
	    declare collection tmp_pcl_duplicates scope query;
	    
	    delete from collection tmp_partner_data;
	    delete from collection tmp_partner_condensed;
	    delete from collection tmp_partner_pairs;
	    delete from collection tmp_pcl_duplicates;

	    print 'Create tmp_partner_data at ' + dateformat(getdate(), 'hh:mm:ss');
	    insert
		collection tmp_partner_data
	    select
		-- One p_partner key is sufficient for all three tables invlolved
		-- Start of p partner
		p_partner_key = :p:p_partner_key,
		p_given_name = :p:p_given_name,
		p_preferred_name = :p:p_preferred_name,
		p_surname = :p:p_surname,
		p_surname_first	= :p:p_surname_first,
		p_suffix = :p:p_suffix,
		p_org_name = :p:p_org_name,
		p_gender = :p:p_gender,
		-- Start of p location.
		--Concatenate address fields
		p_address_1 = nth(isnull(:l:p_address_1 + ' ','') + isnull(:l:p_address_2 + ' ','') + isnull(:l:p_address_3 + ' ','') + isnull(:l:p_city + ' ','') + isnull(:l:p_state_province + ' ','') + isnull(:l:p_country_code + ' ','') + isnull(:l:p_postal_code + ' ',''), 1),
		p_address_2 = nth(isnull(:l:p_address_1 + ' ','') + isnull(:l:p_address_2 + ' ','') + isnull(:l:p_address_3 + ' ','') + isnull(:l:p_city + ' ','') + isnull(:l:p_state_province + ' ','') + isnull(:l:p_country_code + ' ','') + isnull(:l:p_postal_code + ' ',''), 2),
		p_address_3 = nth(isnull(:l:p_address_1 + ' ','') + isnull(:l:p_address_2 + ' ','') + isnull(:l:p_address_3 + ' ','') + isnull(:l:p_city + ' ','') + isnull(:l:p_state_province + ' ','') + isnull(:l:p_country_code + ' ','') + isnull(:l:p_postal_code + ' ',''), 3),
		--Start of p contact info
		--Create phone number fields
		p_contact_data_phone1 = isnull((select
						nth(isnull(:c2:p_phone_country,'') + isnull(:c2:p_phone_area_city,'') + isnull(:c2:p_contact_data,''), 1)
					from 
						/apps/kardia/data/Kardia_DB/p_contact_info/rows c2
					where
						:c2:p_partner_key = :p:p_partner_key and
						(:c2:p_contact_type = 'P' or :c2:p_contact_type = 'C')
					order by
						:c2:p_contact_id asc,
						:c2:s_date_modified desc
					), ''),
		p_contact_data_phone2 = isnull((select
						nth(isnull(:c2:p_phone_country,'') + isnull(:c2:p_phone_area_city,'') + isnull(:c2:p_contact_data,''), 2)
					from 
						/apps/kardia/data/Kardia_DB/p_contact_info/rows c2
					where
						:c2:p_partner_key = :p:p_partner_key and
						(:c2:p_contact_type = 'P' or :c2:p_contact_type = 'C')
					order by
						:c2:p_contact_id asc,
						:c2:s_date_modified desc
					), ''),
		p_contact_data_phone3 = isnull((select
						nth(isnull(:c2:p_phone_country,'') + isnull(:c2:p_phone_area_city,'') + isnull(:c2:p_contact_data,''), 3)
					from 
						/apps/kardia/data/Kardia_DB/p_contact_info/rows c2
					where
						:c2:p_partner_key = :p:p_partner_key and
						(:c2:p_contact_type = 'P' or :c2:p_contact_type = 'C')
					order by
						:c2:p_contact_id asc,
						:c2:s_date_modified desc
					), ''),
		--Create email fields
		p_contact_data_email1 = isnull((select
						nth(isnull(:c2:p_contact_data,''), 1)
					from 
						/apps/kardia/data/Kardia_DB/p_contact_info/rows c2
					where
						:c2:p_partner_key = :p:p_partner_key and
						:c2:p_contact_type = 'E'
					order by
						:c2:p_contact_id asc,
						:c2:s_date_modified desc
					), ''),
		p_contact_data_email2 = isnull((select
						nth(isnull(:c2:p_contact_data,''), 2)
					from 
						/apps/kardia/data/Kardia_DB/p_contact_info/rows c2
					where
						:c2:p_partner_key = :p:p_partner_key and
						:c2:p_contact_type = 'E'
					order by
						:c2:p_contact_id asc,
						:c2:s_date_modified desc
					), ''),
		p_contact_data_email3 = isnull((select
						nth(isnull(:c2:p_contact_data,''), 3)
					from 
						/apps/kardia/data/Kardia_DB/p_contact_info/rows c2
					where
						:c2:p_partner_key = :p:p_partner_key and
						:c2:p_contact_type = 'E'
					order by
						:c2:p_contact_id asc,
						:c2:s_date_modified desc
					), '')
	    from
		/apps/kardia/data/Kardia_DB/p_partner/rows p,
		/apps/kardia/data/Kardia_DB/p_location/rows l
	    where
		:p:p_partner_key *= :l:p_partner_key
	    group by
	    	:p:p_partner_key
	    order by
		:p:p_partner_key asc,
		:l:p_partner_key asc,
		:l:s_date_modified desc
	    ;

	-- Creates and fills tmp_partner_condensed by concatenation
	    print 'Create tmp_partner_condensed at ' + dateformat(getdate(), 'hh:mm:ss');		
	    insert
	    	collection tmp_partner_condensed
	    select
	    	p_partner_key = :p_partner_key,
		p_name_data =	isnull(:p_given_name + ' ', '') +
				condition(rtrim(:p_given_name) = rtrim(:p_preferred_name), '', isnull(:p_preferred_name + ' ', '')) +
				isnull(:p_surname + ' ', '') +
				isnull(:p_suffix + ' ', '') +
				isnull(:p_org_name + ' ', ''),
		p_addr_data =	isnull(:p_address_1 + ' ', '') +
				isnull(:p_address_2 + ' ', '') +
				isnull(:p_address_3 + ' ', ''),
		p_cont_data =	isnull(:p_contact_data_phone1 + ' ', '') +
				isnull(:p_contact_data_phone2 + ' ', '') +
				isnull(:p_contact_data_phone3 + ' ', '') +
				isnull(:p_contact_data_email1 + ' ', '') +
				isnull(:p_contact_data_email2 + ' ', '') +
				isnull(:p_contact_data_email3 + ' ', '')
	    from
	    	collection tmp_partner_data
	    ;
	
	--Returns a table containing pairs of partner keys that are possible matches
	    -- Insert based on first name sorting
	    print 'Create tmp_partner_pairs by N at ' + dateformat(getdate(), 'hh:mm:ss');
	    insert
	    	collection tmp_partner_pairs
	    select
	    	p_partner_key_1 = :p_partner_key_1,
		p_partner_key_2 = :p_partner_key_2
	    from
	    	/apps/kardia/modules/base/duplicate_create_pairs_names.qy?match_dist=3
	    having
		(:parameters:partner is null or :p_partner_key_1 = :parameters:partner)
	    -- prevent duplicate rows
	    on duplicate :p_partner_key_1, :p_partner_key_2
	    	update set :p_partner_key_1 = :p_partner_key_1
	    ;

	    -- Insert based on contact sorting
	    print 'Create tmp_partner_pairs by C at ' + dateformat(getdate(), 'hh:mm:ss');
	    insert
	    	collection tmp_partner_pairs
	    select
	    	p_partner_key_1 = :p_partner_key_1,
		p_partner_key_2 = :p_partner_key_2
	    from
	    	/apps/kardia/modules/base/duplicate_create_pairs_contacts.qy?match_dist=3
	    having
		(:parameters:partner is null or :p_partner_key_1 = :parameters:partner)
	    -- prevent duplicate rows
	    on duplicate :p_partner_key_1, :p_partner_key_2
	    	update set :p_partner_key_1 = :p_partner_key_1
	    ;

	    -- Insert based on address sorting
	    print 'Create tmp_partner_pairs by A at ' + dateformat(getdate(), 'hh:mm:ss');
	    insert
	    	collection tmp_partner_pairs
	    select
	    	p_partner_key_1 = :p_partner_key_1,
		p_partner_key_2 = :p_partner_key_2
	    from
	    	/apps/kardia/modules/base/duplicate_create_pairs_addresses.qy?match_dist=3
	    having
		(:parameters:partner is null or :p_partner_key_1 = :parameters:partner)
	    -- prevent duplicate rows
	    on duplicate :p_partner_key_1, :p_partner_key_2
	    	update set :p_partner_key_1 = :p_partner_key_1
	    ;
	    
	    -- Insert based on last name sorting
	    print 'Create tmp_partner_pairs by S at ' + dateformat(getdate(), 'hh:mm:ss');
	    insert
	    	collection tmp_partner_pairs
	    select
	    	p_partner_key_1 = :p_partner_key_1,
		p_partner_key_2 = :p_partner_key_2
	    from
	    	/apps/kardia/modules/base/duplicate_create_pairs_surnames.qy?match_dist=6
	    having
		(:parameters:partner is null or :p_partner_key_1 = :parameters:partner)
	    -- prevent duplicate rows
	    on duplicate :p_partner_key_1, :p_partner_key_2
	    	update set :p_partner_key_1 = :p_partner_key_1
	    ;

	    print 'Create tmp_pcl_duplicates by weighted average in one query at ' + dateformat(getdate(), 'hh:mm:ss');
	    insert
	    	collection tmp_pcl_duplicates
	    select
	    	type = 'P',
		--perform a weighted average of similarity and fuzzy
		--priority = 0.2 * cos_compare(:c1:p_data, :c2:p_data) + 0.8 * (lev_compare(:c1:p_data, :c2:p_data, 1063)),
		priority = constrain(cos_compare(:c1:p_name_data + ' ' + :c1:p_addr_data, :c2:p_name_data + ' ' + :c2:p_addr_data), condition(char_length(rtrim(:c1:p_cont_data + :c2:p_cont_data)) > 1, cos_compare(:c1:p_name_data + ' ' + :c1:p_cont_data, :c2:p_name_data + ' ' + :c2:p_cont_data), square(cos_compare(:c1:p_name_data + ' ' + :c1:p_cont_data, :c2:p_name_data + ' ' + :c2:p_cont_data)) * 0.9), 1.0),
		p_partner_key_1 = :p:p_partner_key_1,
		p_location_id_1 = '',
		p_revision_id_1 = '',
		p_contact_id_1 = '',
		p_partner_key_2 = :p:p_partner_key_2,
		p_location_id_2 = '',
		p_revision_id_2 = '',
		p_contact_id_2 = '' --,
		--ca1 = :c1:p_name_data + :c1:p_addr_data,
		--ca2 = :c2:p_name_data + :c2:p_addr_data,
		--cc1 = :c1:p_name_data + :c1:p_cont_data,
		--cc2 = :c2:p_name_data + :c2:p_cont_data
	    from
	        collection tmp_partner_pairs p,
		collection tmp_partner_condensed c1,
		collection tmp_partner_condensed c2
	    where
	    	:p:p_partner_key_1 = :c1:p_partner_key and
		:p:p_partner_key_2 = :c2:p_partner_key and
		(:parameters:partner is null or :p:p_partner_key_1 = :parameters:partner)
	    having
		:priority > 0.70
	    ;

	--Adds to table tmp_pcl_duplicates records that contain
	--  primary keys of contact and location information duplicated
	--  across a single partner
	    print 'Create tmp_pcl_duplicates by exact record checking at ' + dateformat(getdate(), 'hh:mm:ss');
	    insert
	    	collection tmp_pcl_duplicates
	    select
	    	type = :type,
		priority = 1.0,
	    	p_partner_key_1 = :p_partner_key_1,
		p_location_id_1 = :p_location_id_1,
		p_revision_id_1 = :p_revision_id_2,
		p_contact_id_1 = :p_contact_id_1,
		p_partner_key_2 = :p_partner_key_2,
		p_location_id_2 = :p_location_id_2,
		p_revision_id_2 = :p_revision_id_2,
		p_contact_id_2 = :p_contact_id_2
	    from
	    	/apps/kardia/modules/base/duplicate_records.qy
	    ;

	--Return the dataset to the caller
	    print 'Return result set at ' + dateformat(getdate(), 'hh:mm:ss');
	    select
		*
	    from
		collection tmp_pcl_duplicates
	    where
	    	:priority >= 0.48
	    order by
	    	:priority desc
	";
    }
