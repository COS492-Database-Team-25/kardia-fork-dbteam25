$Version=2$
plugin_base_mergeexec_addr "system/query"
    {
    partner_a "query/parameter" { type=string; style=strnull; }
    partner_b "query/parameter" { type=string; style=strnull; }
    partner_c "query/parameter" { type=string; style=strnull; }

    sql = " -- Partner list
	    declare object info;
	    select :info:partners = ralign(:parameters:partner_a, 16) + ralign(:parameters:partner_b, 16) + ralign(isnull(:parameters:partner_c, ''), 16);

	    -- Mark existing destination addresses as Inactive if we're moving/copying an Active address there.
	    update
		/apps/kardia/data/Kardia_DB/p_merge/rows m,
		/apps/kardia/modules/base/abc.csv/rows abc,
		identity /apps/kardia/data/Kardia_DB/p_location/rows l1,
		/apps/kardia/data/Kardia_DB/p_location/rows l2
	    set
		:l1:p_record_status_code = 'I'
	    where
		:l2:p_partner_key = ltrim(substring(:info:partners, (charindex(upper(substring(:m:p_disposition, 1, 1)), 'ABC') - 1)*16 + 1, 16)) and
		:l2:p_location_id = convert(integer, substring(:m:p_data_key, charindex(':', :m:p_data_key) + 1, 16)) and
		charindex(:abc:letter, :m:p_disposition) >= 2 and
		:m:p_data_source = 'Address' and
		:m:p_partner_key_a = :parameters:partner_a and
		:m:p_partner_key_b = :parameters:partner_b and
		:l1:p_partner_key = ltrim(substring(:info:partners, (charindex(:abc:letter, 'ABC') - 1)*16 + 1, 16)) and
		:l1:p_revision_id = 0 and
		:l1:p_record_status_code = 'A' and
		:l2:p_record_status_code = 'A' and
		:l2:p_revision_id = 0
	    ;

	    -- Phase One, copy
	    insert
		/apps/kardia/data/Kardia_DB/p_location/rows
	    select
		p_partner_key = ltrim(substring(:info:partners, (charindex(:abc:letter, 'ABC') - 1)*16 + 1, 16)),
		:l:p_revision_id,
		:l:p_location_type,
		:l:p_date_effective,
		:l:p_date_good_until,
		:l:p_purge_date,
		:l:p_in_care_of,
		:l:p_address_1,
		:l:p_address_2,
		:l:p_address_3,
		:l:p_city,
		:l:p_state_province,
		:l:p_country_code,
		:l:p_postal_code,
		:l:p_postal_mode,
		:l:p_bulk_postal_code,
		:l:p_certified_date,
		:l:p_postal_status,
		:l:p_postal_barcode,
		:l:p_record_status_code,
		:l:p_location_comments,
		:l:s_date_created,
		:l:s_created_by,
		:l:s_date_modified,
		:l:s_modified_by
	    from
		/apps/kardia/modules/base/abc.csv/rows abc,
		/apps/kardia/data/Kardia_DB/p_merge/rows m,
		/apps/kardia/data/Kardia_DB/p_location/rows l
	    where
		:m:p_data_source = 'Address' and
		:m:p_partner_key_a = :parameters:partner_a and
		:m:p_partner_key_b = :parameters:partner_b and
		charindex(:abc:letter, :m:p_disposition) >= 2 and
		:l:p_partner_key = ltrim(substring(:info:partners, (charindex(upper(substring(:m:p_disposition, 1, 1)), 'ABC') - 1)*16 + 1, 16)) and
		:l:p_location_id = convert(integer, substring(:m:p_data_key, charindex(':', :m:p_data_key) + 1, 16))
		--:l:name = replace(:m:p_data_key, ':', '|')
	    ;

	    -- Phase Two, delete/cut
	    delete
		identity /apps/kardia/data/Kardia_DB/p_location/rows l,
		/apps/kardia/data/Kardia_DB/p_merge/rows m
	    where
		:m:p_data_source = 'Address' and
		:m:p_partner_key_a = :parameters:partner_a and
		:m:p_partner_key_b = :parameters:partner_b and
		ascii(:m:p_disposition) > 96 and
		:l:p_partner_key = ltrim(substring(:info:partners, (charindex(substring(:m:p_disposition, 1, 1), 'abc') - 1)*16 + 1, 16)) and
		:l:p_location_id = convert(integer, substring(:m:p_data_key, charindex(':', :m:p_data_key) + 1, 16))
		--:l:name = replace(:m:p_data_key, ':', '|')
	    ;

	    -- Mark an address as Active if no Active addresses are left after a move/delete.
	    update
		/apps/kardia/data/Kardia_DB/p_merge/rows m,
		identity /apps/kardia/data/Kardia_DB/p_location/rows l
	    set
		:p_record_status_code = condition(
					    (select count(1) from /apps/kardia/data/Kardia_DB/p_location/rows l2 where :l2:p_partner_key = :l:p_partner_key and :l2:p_record_status_code == 'A') == 0 and
					    (select count(1) from /apps/kardia/data/Kardia_DB/p_location/rows l2 where :l2:p_partner_key = :l:p_partner_key and :l2:p_record_status_code == 'I' and :l2:s_date_modified > :l:s_date_modified) == 0
					    , 'A'
					    , :p_record_status_code
					)
	    where
		:m:p_data_source = 'Address' and
		:m:p_partner_key_a = :parameters:partner_a and
		:m:p_partner_key_b = :parameters:partner_b and
		:l:p_partner_key = condition(ascii(:m:p_disposition) = 97, :parameters:partner_a, condition(ascii(:m:p_disposition) = 98, :parameters:partner_b, NULL)) and
		:l:p_record_status_code = 'I'
	    ;

	    -- Return
	    select 1 where 1 = 0
	    ";
    }
