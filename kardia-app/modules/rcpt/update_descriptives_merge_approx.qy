$Version=2$
update_descriptives_merge_catchup "system/query"
    {
    fund "query/parameter" { type=string; style=strnull;}
    donor "query/parameter" { type=string; style=strnull;}

    sql = " declare collection tmp_gift_items scope application;
            declare collection tmp_segments scope application;
            declare collection tmp_aggregated_segments;

            delete collection tmp_segments;
            delete collection tmp_aggregated_segments;

	    -- Step One: Identify
	    update
		identity /apps/kardia/data/Kardia_DB/a_descriptives_hist/rows dh
	    set
		:dh:a_is_approximate = condition(
                        :dh:a_is_approximate is null and
                        :dh:a_count <= 6 and -- these try to discount regular giving patterns from being approximated
                        :dh:a_act_average_months <= 6 and
                        (:dh:a_prev_end is not null or :dh:a_count != 1) and -- first gifts are special
                        not datediff(day, :dh:a_prev_end, :dh:a_first_gift) > 334 and -- this prevents annual gifts from being merged together
                        (select 
                                count(1)
                                from /apps/kardia/data/Kardia_DB/a_descriptives_hist/rows dh2
                                where :dh2:a_ledger_number = :dh:a_ledger_number and :dh2:a_cost_center = :dh:a_cost_center and :dh2:p_donor_partner_key = :dh:p_donor_partner_key and (:dh2:a_hist_id = :dh:a_hist_id + 1 or :dh2:a_hist_id = :dh:a_hist_id - 1) and :dh2:a_count < 6 and :dh2:a_act_average_months < 6 and (not isnull(:dh:a_is_extra, 0) or not isnull(:dh2:a_is_extra, 0))
                                ) >= 1,
                        2,
                        0
                        )
	    where
		(:parameters:fund is null or :parameters:fund = :dh:a_cost_center) and
		(:parameters:donor is null or :parameters:donor = :dh:p_donor_partner_key)
	    ;
            
            -- Step Two : segment the approximate regions
            insert
                collection tmp_segments
            select
                ledger = :dh1:a_ledger_number,
                fund = :dh1:a_cost_center,
                donor = :dh1:p_donor_partner_key,
                hist_id = :dh1:a_hist_id,
                is_approximate = :dh1:a_is_approximate,
                seg = row_number() - row_number(:dh1:a_ledger_number, :dh1:a_cost_center, :dh1:p_donor_partner_key, :dh1:a_is_approximate),
                amount = :dh1:a_amount,
                first = :dh1:a_first_gift,
                last = :dh1:a_last_gift,
                ntl = :dh1:a_ntl_gift,
                count = :dh1:a_count,
                total = :dh1:a_total,
                prev_end = :dh1:a_prev_end,
                next_start = :dh1:a_next_start
            from
                /apps/kardia/data/Kardia_DB/a_descriptives_hist/rows dh1
            where
                (:parameters:fund is null or :parameters:fund = :dh1:a_cost_center) and
		(:parameters:donor is null or :parameters:donor = :dh1:p_donor_partner_key)
            ;

            -- Step Three: Aggregate Each Segment
            insert
		collection tmp_aggregated_segments
            select
                ledger = :t1:ledger,
                fund = :t1:fund,
                donor = :t1:donor,
                seg = :t1:seg,
                merged_id = max(:t1:hist_id),
                merge_count = count(1),
                amount = null,
                first = min(:t1:first),
                last = max(:t1:last),
                ntl = null,
                count = sum(:t1:count),
                total = sum(:t1:total),
                prev_end = condition(last(isnull(:t1:prev_end, 'null')) = 'null', null, last(:t1:prev_end)),
                next_start = condition(first(isnull(:t1:next_start, 'null')) = 'null', null, first(:t1:next_start))
            from
                collection tmp_segments t1
            where 
                (:parameters:fund is null or :parameters:fund = :t1:fund) and
		(:parameters:donor is null or :parameters:donor = :t1:donor) and
                :t1:is_approximate = 2
            order by
                :t1:ledger,
                :t1:fund,
                :t1:donor,
                :t1:hist_id,
                :t1:seg
            group by
                :t1:ledger,
                :t1:fund,
                :t1:donor,
                :t1:seg
            ;
            -- Sets the amount to the mode of all amounts being approximated together.
            -- This is so that other descriptives come out cleaner and
            -- because a real value for the amount provides better descriptives than
            -- an averged value. In case of a tie, this (TODO : when implemented) chooses the largest
            -- mode so the donor is not prematurely deemed lapsed
            update
                collection tmp_aggregated_segments t
            set
                :t:amount = (select :amount from collection tmp_segments where :ledger = :t:ledger and :fund = :t:fund and :donor = :t:donor and :seg = :t:seg group by :amount order by count(1) desc, :amount desc limit 1),
                :t:ntl = (select nth(:giftdate, 2) from collection tmp_gift_items where :ledger = :t:ledger and :fund = :t:fund and :donor = :t:donor and :giftdate <= :t:last order by :giftdate desc)
            where
                (:parameters:fund is null or :parameters:fund = :t:fund) and
		(:parameters:donor is null or :parameters:donor = :t:donor)
            ;
            
	    -- Step Four: Merge
	    update
		identity /apps/kardia/data/Kardia_DB/a_descriptives_hist/rows dh2,
                collection tmp_aggregated_segments t
	    set
                :dh2:a_amount = :t:amount,
                :dh2:a_first_gift = :t:first,
		:dh2:a_last_gift = :t:last,
                :dh2:a_ntl_gift = condition(:t:count > 1, :t:ntl, null),
                :dh2:a_count = :t:count,
		:dh2:a_total = :t:total,
                :dh2:a_is_approximate = condition(:t:merge_count > 1, 1, 0),
                :dh2:a_prev_end = :t:prev_end,
		:dh2:a_next_start = :t:next_start,
                :dh2:a_act_average_amount = condition(
                                datediff(day, :dh2:a_first_gift, :dh2:a_last_gift) < 16,
                                null,
                                (:dh2:a_total - :dh2:a_amount) / round(datediff(day, :dh2:a_first_gift, :dh2:a_last_gift) / 30.5)
                                ),
                :dh2:a_act_average_months = convert(integer, round(datediff(day, :dh2:a_first_gift, :dh2:a_last_gift) / 30.5)),
                :dh2:a_act_average_interval = condition(
                                :dh2:a_count = 1,
                                null,
                                (datediff(day, :dh2:a_first_gift, :dh2:a_last_gift) / 30.5) / (:dh2:a_total / :dh2:a_amount - 1)
                                ),
                :dh2:a_is_extra = 0
	    where
		(:parameters:fund is null or :parameters:fund = :dh2:a_cost_center) and
		(:parameters:donor is null or :parameters:donor = :dh2:p_donor_partner_key) and
                :t:ledger = :dh2:a_ledger_number and
                :t:fund = :dh2:a_cost_center and
                :t:donor = :dh2:p_donor_partner_key and
                :t:merged_id = :dh2:a_hist_id
	    ;

	    -- Step Five: Delete Merged
	    delete
		/apps/kardia/data/Kardia_DB/a_descriptives_hist/rows dh1
            where
		(:parameters:fund is null or :parameters:fund = :dh1:a_cost_center) and
		(:parameters:donor is null or :parameters:donor = :dh1:p_donor_partner_key) and
		:dh1:a_is_approximate = 2
	    ";
    }