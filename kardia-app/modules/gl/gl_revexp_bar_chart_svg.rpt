$Version=2$
gl_revexp_bar_chart_svg "system/report"
    {
    // Created by:	Greg Beeley
    // Last change:	01/09/2019
    document_format="text/plain";
    content_type="image/svg+xml";
    pagewidth=255;
    pageheight=255;
    marginleft=0;
    marginright=0;
    margintop=0;
    marginbottom=0;
    text_pagebreak = no;

    // Rendering controls
    image_width "report/parameter" { type=integer; default=400; }
    image_height "report/parameter" { type=integer; default=150; }
    rev_bar_color "report/parameter" { type=string; default="black"; }
    exp_bar_color "report/parameter" { type=string; default="black"; }
    text_inside_color "report/parameter" { type=string; default="white"; }
    text_outside_color "report/parameter" { type=string; default="black"; }

    // Data controls
    ledger "report/parameter" { type=string; }
    fund "report/parameter" { type=string; }
    start_period "report/parameter" { type=string; }
    end_period "report/parameter" { type=string; }
    months "report/parameter" { type=integer; default=12; }

    // Get accounting period range
    end_period_qy "report/query"
	{
	sql = "	select
		    :a_period,
		    :a_start_date,
		    sel_period = :this:end_period
		from
		    /apps/kardia/data/Kardia_DB/a_period/rows
		where
		    :a_ledger_number = :this:ledger and
		    :a_summary_only = 0 and
		    (:a_period = :this:end_period or :a_start_date <= getdate())
		order by
		    :a_end_date desc
		having
		    :sel_period is null or :a_period = :sel_period
		limit
		    1
		";
	}
    start_period_qy "report/query"
	{
	sql = "	select
		    :a_period,
		    :a_start_date,
		    sel_period = :this:start_period,
		    n_periods = datediff(month, :a_start_date, :end_period_qy:a_start_date) + 1
		from
		    /apps/kardia/data/Kardia_DB/a_period/rows
		where
		    :a_ledger_number = :this:ledger and
		    :a_summary_only = 0 and
		    (:a_period = :this:start_period or :a_start_date > dateadd(month, 0 - :this:months, getdate()))
		order by
		    :a_end_date asc
		having
		    :sel_period is null or :a_period = :sel_period
		limit
		    1
		";
	}


    // Parameters from config
    config_qy "report/query"
	{
	sql = " select
		    *
		from
		    object expression('/apps/kardia/modules/gl/accounting_config.qyp/' + :this:ledger)
		";
	}


    // Various totals for the period
    ranges_qy "report/query"
	{
	sql = "	declare collection gldata scope application;
		declare object info;

		delete from collection gldata;
	
		insert
		    collection gldata
		select
		    :p:a_period,
		    :p:a_start_date,
		    expense = isnull(sum(condition((:t:a_account_code >= :config_qy:GLExpLow and :t:a_account_code <= :config_qy:GLExpHigh and :t:a_account_category = '50'), :t:a_amount, $0)), $0),
		    revenue = $0 - isnull(sum(condition((:t:a_account_code >= :config_qy:GLRevLow and :t:a_account_code <= :config_qy:GLRevHigh and :t:a_account_category = '40'), :t:a_amount, $0)), $0)
		from
		    /apps/kardia/data/Kardia_DB/a_period/rows p,
		    /apps/kardia/data/Kardia_DB/a_transaction/rows t
		where
		    :p:a_ledger_number = :this:ledger and
		    :p:a_period >= :start_period_qy:a_period and
		    :p:a_period <= :end_period_qy:a_period and
		    :p:a_summary_only = 0 and
		    :t:a_ledger_number =* :p:a_ledger_number and
		    :t:a_period =* :p:a_period and
		    (:this:fund is null or :t:a_fund = :this:fund)
		group by
		    :p:a_period
		order by
		    :p:a_start_date asc
		;

		select
		    :info:max_expense = max(:expense),
		    :info:max_revenue = max(:revenue)
		from
		    collection gldata
		;

		-- Determine chart range
		select :info:maxval = $0;
		select :info:maxval = condition(:info:maxval > :info:max_expense, :info:maxval, :info:max_expense);
		select :info:maxval = condition(:info:maxval > :info:max_revenue, :info:maxval, :info:max_revenue);

		-- Return the determined value
		select
		    :info:maxval
		where
		    :info:maxval > $0
		";
	}

    gldata_qy "report/query"
	{
	sql = "	declare collection gldata scope application;
	
		select
		    *,
		    year = datepart(year, :a_start_date),
		    month = dateformat(:a_start_date, 'MMM'),
		    idx = datediff(month, :start_period_qy:a_start_date, :a_start_date)
		from
		    collection gldata
		order by
		    :a_start_date asc
		";

	cum_expense "report/aggregate" { compute="sum(:expense)"; reset=0; }
	cum_revenue "report/aggregate" { compute="sum(:revenue)"; reset=0; }
	}

    // Geometry data
    geom_qy "report/query"
	{
	sql = "	select
		    -- revenue bar
		    rx = round((:this:image_width - 30) / (:start_period_qy:n_periods * 2), 0) * :gldata_qy:idx * 2 + 30,
		    rwidth = round((:this:image_width - 30) / (:start_period_qy:n_periods * 2), 0) - 1,
		    ry = :this:image_height - 10 - round(:gldata_qy:revenue / :ranges_qy:maxval * (:this:image_height - 10)),
		    rheight = round(:gldata_qy:revenue / :ranges_qy:maxval * (:this:image_height - 10)),
		    rtext_y = :this:image_height - 15,
		    rtext_x = round(round((:this:image_width - 30) / (:start_period_qy:n_periods * 2), 0) * (:gldata_qy:idx * 2 + 0.5)) - 0 + 30,

		    -- expense bar
		    ex = round((:this:image_width - 30) / (:start_period_qy:n_periods * 2), 0) * (:gldata_qy:idx * 2 + 1) + 29,
		    ewidth = round((:this:image_width - 30) / (:start_period_qy:n_periods * 2), 0) - 1,
		    ey = :this:image_height - 10 - round(:gldata_qy:expense / :ranges_qy:maxval * (:this:image_height - 10)),
		    eheight = round(:gldata_qy:expense / :ranges_qy:maxval * (:this:image_height - 10)),
		    etext_y = :this:image_height - 15,
		    etext_x = round(round((:this:image_width - 30) / (:start_period_qy:n_periods * 2), 0) * ((:gldata_qy:idx * 2 + 1) + 0.5)) - 0 + 28
		";
	}

    // The years we're covering
    years_qy "report/query"
	{
	sql = "	select
		    year = datepart(year, :p:a_start_date),
		    cnt = count(1),
		    is_first = condition(datepart(year, :p:a_start_date) == datepart(year, :start_period_qy:a_start_date), 1, 0)
		from
		    /apps/kardia/data/Kardia_DB/a_period/rows p
		where
		    :p:a_ledger_number = :this:ledger and
		    :p:a_period >= :start_period_qy:a_period and
		    :p:a_period <= :end_period_qy:a_period and
		    :p:a_summary_only = 0
		group by
		    datepart(year, :p:a_start_date)
		";

	totalcnt "report/aggregate" { compute="isnull(sum(:cnt),0)"; reset=0; }
	}

    // Geometry data for years
    year_geom_qy "report/query"
	{
	sql = "	select
		    y = :this:image_height,
		    lineto_y = :this:image_height - 10,
		    line_x = (:years_qy:totalcnt * 2) * round((:this:image_width - 30) / (:start_period_qy:n_periods * 2), 0) - 1 + 30,
		    x = (:years_qy:totalcnt * 2) * round((:this:image_width - 30) / (:start_period_qy:n_periods * 2), 0) + 3 + 30
		";
	}

    // Amounts for the lefthand side
    scale_qy "report/query"
	{
	sql = "	select
		    scale = round(log10(:ranges_qy:maxval / 7.0)),
		    interval = power(10, round(log10(:ranges_qy:maxval / 7.0))),
		    icnt = round(:ranges_qy:maxval / power(10, round(log10(:ranges_qy:maxval / 7.0)))),
		    adj = condition(round(:ranges_qy:maxval / power(10, round(log10(:ranges_qy:maxval / 7.0)))) <= 6, 1, condition(round(:ranges_qy:maxval / power(10, round(log10(:ranges_qy:maxval / 7.0)))) <= 12, 2, 4))
		";
	}
    final_scale_qy "report/query"
	{
	sql = "	select
		    icnt = round(:scale_qy:icnt / :scale_qy:adj),
		    interval = :scale_qy:interval * :scale_qy:adj,
		    divisor = condition(:scale_qy:interval < 1000.0, 1, condition(:scale_qy:interval < 1000000.0, 1000, 1000000)),
		    suffix = condition(:scale_qy:interval < 1000.0, '', condition(:scale_qy:interval < 1000000.0, 'K', 'M'))
		";
	}
    scale_item_qy "report/query"
	{
	sql = "	select
		    value = :id * :final_scale_qy:interval,
		    valtxt = '' + convert(integer, (:id * :final_scale_qy:interval) / :final_scale_qy:divisor) + :final_scale_qy:suffix
		from
		    /apps/kardia/data/Months.csv/rows -- just need a source of repeating data
		having
		    :value <= :ranges_qy:maxval
		";
	}
    scale_geom_qy "report/query"
	{
	sql = "	select
		    line_x = 25,
		    lineto_x = 29,
		    line_y = :this:image_height - 10 - round(convert(money,:scale_item_qy:value) / :ranges_qy:maxval * (:this:image_height - 10)) - 1,
		    x = 0,
		    y = :this:image_height - 10 - round(convert(money,:scale_item_qy:value) / :ranges_qy:maxval * (:this:image_height - 10)) + 2
		";
	}

    // Here's our SVG
    main_form "report/form"
	{
	source=end_period_qy, start_period_qy, config_qy, ranges_qy;

	// SVG header
	data "report/area"
	    {
	    x=0; y=0; width=255; height=0;
	    value=runserver('<?xml version="1.0" standalone="no"?>\n' +
			    '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n' +
			    '<svg width="' + :this:image_width + 'px" height="' + :this:image_height + 'px" viewBox="0 0 ' + :this:image_width + 'px ' + :this:image_height + 'px" xmlns="http://www.w3.org/2000/svg" version="1.1">\n'
			    );
	    }

	// Here comes the gl data
	gl_form "report/form"
	    {
	    source=gldata_qy, geom_qy;

	    gl_data "report/area"
		{
		x=0; width=255; height=0;
		value=runserver(
			'    <rect x="' + :geom_qy:rx + 'px" y="' + :geom_qy:ry + 'px" width="' + :geom_qy:rwidth + 'px" height="' + :geom_qy:rheight + 'px" style="stroke:none; fill:' + :this:rev_bar_color + ';" />\n' +
			'    <rect x="' + :geom_qy:ex + 'px" y="' + :geom_qy:ey + 'px" width="' + :geom_qy:ewidth + 'px" height="' + :geom_qy:eheight + 'px" style="stroke:none; fill:' + :this:exp_bar_color + ';" />\n' +
			'    <text x="' + ((:geom_qy:rtext_x + :geom_qy:etext_x) / 2) + 'px" y="' + (:geom_qy:rtext_y) + 'px" style="font-family:arial,helvetica,sans-serif; font-size:7pt; font-weight:bold; stroke:none; fill:' + :this:text_inside_color + '; text-anchor:middle">' + :gldata_qy:month + '</text>\n'
			);
		}
			//+
			//'    <text x="' + (:geom_qy:etext_x) + 'px" y="' + (:geom_qy:etext_y) + 'px" style="font-family:arial,helvetica,sans-serif; font-size:7pt; font-weight:bold; stroke:none; fill:' + :this:text_inside_color + '; text-anchor:middle">' + :gldata_qy:month + '</text>\n'
			//);
	    }

	// Mark out the years
	years_form "report/form"
	    {
	    source=years_qy, year_geom_qy;

	    year_txt "report/area"
		{
		x=0; width=255; height=0;
		condition=runserver(:years_qy:cnt >= 1);
		value=runserver(
			'    <text x="' + :year_geom_qy:x + 'px" y="' + :year_geom_qy:y + 'px" style="font-family:arial,helvetica,sans-serif; font-size:7pt; font-weight:bold; stroke:none; fill:' + :this:text_outside_color + ';">' + :years_qy:year + '</text>\n'
			);
		}

	    year_line "report/area"
		{
		x=0; width=255; height=0;
		condition=runserver(not :years_qy:is_first);
		value=runserver(
			'   <line x1="' + :year_geom_qy:line_x + 'px" y1="' + :year_geom_qy:y + 'px" x2="' + :year_geom_qy:line_x + 'px" y2="' + :year_geom_qy:lineto_y + 'px" style="stroke:' + :this:text_outside_color + '; stroke-width:2px;"/>\n'
			);
		}
	    }

	// Scale along lefthand side
	scale_form "report/form"
	    {
	    source=scale_qy, final_scale_qy, scale_item_qy, scale_geom_qy;

	    scale_txt "report/area"
		{
		x=0; width=255; height=0;
		value=runserver(
			'    <text x="' + :scale_geom_qy:x + 'px" y="' + :scale_geom_qy:y + 'px" style="font-family:arial,helvetica,sans-serif; font-size:7pt; font-weight:bold; stroke:none; fill:' + :this:text_outside_color + ';">' + :scale_item_qy:valtxt + '</text>\n' +
			'    <line x1="' + :scale_geom_qy:line_x + 'px" y1="' + :scale_geom_qy:line_y + 'px" x2="' + :scale_geom_qy:lineto_x + 'px" y2="' + :scale_geom_qy:line_y + 'px" style="stroke:' + :this:text_outside_color + '; stroke-width:2px;"/>\n'
			);
		}
	    }

	// End
	end_data "report/area"
	    {
	    x=0; width=255; height=0;
	    value=runserver('</svg>\n');
	    }
	}
    }
