$Version=2$
plugin_crm_search_DON "system/query"
    {
    // This query object provides the search stage support for
    // searching based on a specific gift given.
    //
    require_endorsement="system:from_application";

    search_id "query/parameter" { type=integer; }
    cur_stage "query/parameter" { type=integer; }
    prev_keys "query/parameter" { type=string; }

    sql = " -- First, we need to get our search stage information and config.
	    declare collection iresult scope application;
	    declare object stage;
	    select
		:stage:op = :s:p_stage_op,
		:stage:startdate = convert(datetime,:sc:start),
		:stage:enddate = convert(datetime,:sc:end),
		:stage:funds = :sc:funds,
		--:stage:notfunds = :sc:notfunds,
		:stage:status = :sc:curstat,
                :stage:lapsedmin = convert(integer, :sc:lapsedmin),
                :stage:lapsedmax = convert(integer, :sc:lapsedmax),
                :stage:lengthmin = convert(integer, :sc:lengthmin),
                :stage:lengthmax = convert(integer, :sc:lengthmax),
                :stage:changes = :sc:changes,
                :stage:minamt = convert(money,:sc:minamt),
		:stage:maxamt = convert(money,:sc:maxamt),
		:stage:mintamt = convert(money,:sc:mintamt),
		:stage:maxtamt = convert(money,:sc:maxtamt),
		:stage:minfreq = convert(double, :sc:minfreq),
		:stage:maxfreq = convert(double, :sc:maxfreq),
                :stage:minavg = convert(money,:sc:minavg),
                :stage:maxavg = convert(money,:sc:maxavg),
		:stage:mincnt = :sc:mincnt,
		:stage:maxcnt = :sc:maxcnt
	    from
		/apps/kardia/data/Kardia_DB/p_partner_search_stage/rows s,
		/apps/kardia/modules/crm/advanced_search_params.qyp sc
	    where
		:s:p_search_id = :parameters:search_id and
		:s:p_search_stage_id = :parameters:cur_stage and
		:sc:p_search_id = :s:p_search_id and
		:sc:p_search_stage_id = :s:p_search_stage_id
	    ;

	    -- Now, create our local result set; we will merge it into the
	    -- main results later.
            -- This section allows overlapping date ranges by default,
            -- though some analytics require a date fully within the provided range.

            -- Summary of analytics that use table a_descriptives partially or wholy:
            --          min and max total giving
            --          min and max average monthly giving
            --          min and max total gift count
            --          status
            --          changes: last gift (gift has to be lapsed)
            -- Summary of analytics that use table a_descriptives_hist partially or wholy:
            --          searching requires a hist entry to, at minimum, overlap start and end dates when they are provided
            --          min and max gift amount
            --          min and max giving interval
            --          changes: all
	    insert
		collection iresult
	    select
		p_partner_key = :dh:p_donor_partner_key,
		p_search_session_id = :parameters:search_id,
		p_search_stage_id = :parameters:cur_stage,
		p_description = last(condition(charindex(',INC,', ',' + :stage:changes + ',') > 0, '' + round(:dh:a_increase_pct * 100) + '% increase on ' + dateformat(:dh:a_first_gift, 'yyyy/MM/dd'), condition(charindex(',DEC,', ',' + :stage:changes + ',') > 0, '' + round(:dh:a_decrease_pct * 100) + '% decrease on ' + dateformat(:dh:a_first_gift, 'yyyy/MM/dd'), '')))
	    from
		/apps/kardia/data/Kardia_DB/a_descriptives_hist/rows dh,
		/apps/kardia/data/Kardia_DB/a_descriptives/rows d
	    where
		:dh:a_ledger_number = :d:a_ledger_number and
		:dh:a_cost_center = :d:a_cost_center and
		:dh:p_donor_partner_key = :d:p_donor_partner_key and
                (:stage:startdate is null or :stage:startdate <= :dh:a_last_gift ) and
		(:stage:enddate is null or :dh:a_first_gift <= :stage:enddate) and
                (:stage:minamt is null or :dh:a_amount >= :stage:minamt) and
		(:stage:maxamt is null or :dh:a_amount <= :stage:maxamt) and
                (:stage:minavg is null or :d:a_act_average_amount >= :stage:minavg) and
		(:stage:maxavg is null or :d:a_act_average_amount <= :stage:maxavg) and
                -- allows for 15% error
                (:stage:minfreq is null or :dh:a_act_average_interval <= :stage:minfreq * 1.15) and
		(:stage:maxfreq is null or :dh:a_act_average_interval >= :stage:maxfreq * 0.85) and
                (:stage:mincnt is null or :d:a_act_count >= convert(integer, :stage:mincnt)) and
		(:stage:maxcnt is null or :d:a_act_count <= convert(integer, :stage:maxcnt)) and
		(:stage:lapsedmin is null or :d:a_lapsed_days >= :stage:lapsedmin) and
		(:stage:lapsedmax is null or :d:a_lapsed_days <= :stage:lapsedmax) and
		(:stage:lengthmin is null or datediff(month, :d:a_first_gift, :d:a_last_gift) >= :stage:lengthmin) and
		(:stage:lengthmax is null or datediff(month, :d:a_first_gift, :d:a_last_gift) <= :stage:lengthmax) and
		(:stage:funds is null or charindex(',' + rtrim(:d:a_cost_center) + ',', ',' + :stage:funds + ',') > 0) and
		-- (:stage:notfunds is null or charindex(',' + :d:a_cost_center + ',', ',' + :stage:notfunds + ',') = 0) and
                
                -- Changes
                -- See kardia-sysdoc/DNR-donor_analytics_misc.txt to see why
                -- algebraic notation is used here.
                ((:stage:changes is null) or
			-- A decrease change means that a new giving history
	                -- began within the time interval with a decrease in giving
			condition(
				charindex(',DEC,', ',' + :stage:changes + ',') = 0, 
				0,
				condition(:dh:a_decrease_pct is not null, 1, 0) * condition(:dh:a_first_gift >= isnull(:stage:startdate, :dh:a_first_gift), 1, 0)
				)
	                -- An increase change means that a new giving history
	                -- began within the time interval with an increase in giving
			+ condition(
				charindex(',INC,', ',' + :stage:changes + ',') = 0,
				0,
				condition(:dh:a_increase_pct is not null, 1, 0) * condition(:dh:a_first_gift >= isnull(:stage:startdate, :dh:a_first_gift), 1, 0)
				)
	                -- An extra change means that an extra gift
        	        -- was givin within the time interval
			+ condition(
				charindex(',EXT,', ',' + :stage:changes + ',') = 0,
				0,
				condition(:dh:a_is_extra = 1, 1, 0)
				)
	                -- A last gift change means that a giving history became lapsed within
        	        -- the time interval and there are no other current active giving patterns.
                	-- This excludes donors who have given a single gift
			+ condition(
				charindex(',LST,', ',' + :stage:changes + ',') = 0,
				0,
				condition(:dh:a_is_current = 0, 1, 0) * condition(:dh:a_last_gift <= isnull(:stage:enddate, :dh:a_last_gift), 1, 0) * condition(:d:a_act_count > 1, 1, 0)
				)
	                -- A first gift change means that a new giving history was started within
        	        -- the time interval that is not a decrease in giving or an extra gift. 
			+ condition(
				charindex(',FIR,', ',' + :stage:changes + ',') = 0,
				0,
				condition(:dh:a_decrease_pct is null, 1, 0) * condition(:dh:a_first_gift >= isnull(:stage:startdate, :dh:a_first_gift), 1, 0) * condition(:dh:a_is_extra = 0, 1, 0)
				)
			> 0
		) and

                (:parameters:prev_keys is null or charindex(',' + rtrim(:dh:p_donor_partner_key) + ',', ',' + :parameters:prev_keys + ',') > 0)
            group by
                :d:a_ledger_number,
                :d:p_donor_partner_key
	    order by
		:d:a_ledger_number,
		:d:p_donor_partner_key,
		:dh:a_last_gift
            having
                --(:stage:mintamt is null or sum(:d:a_act_total) >= :stage:mintamt) and
		--(:stage:maxtamt is null or sum(:d:a_act_total) <= :stage:maxtamt) and
                (:stage:status is null or convert(integer, :stage:status) = max(:d:a_is_current)) and
                (:stage:changes is null or charindex(',LST,', ',' + :stage:changes + ',') = 0 or max(:d:a_is_current) = 0)
            on duplicate
		:p_partner_key,
		:p_search_session_id,
		:p_search_stage_id
	    update set
		:p_partner_key = :p_partner_key
	    ";
    }
