$Version=2$
track_logic "widget/component-decl"
    {
    // Initialize a new step for a track
    InitStep "widget/component-decl-action" { }
    InitStepDone "widget/component-decl-event" { }
    do_InitStep "widget/connector"
	{
	event=InitStep;
	target=InitStep_osrc;
	action=QueryParam;
	event_all_params=1;
	}
    InitStep_osrc "widget/osrc"
	{
	track_id "widget/parameter" { type=integer; }
	step_id "widget/parameter" { type=integer; }
	engagement_id "widget/parameter" { type=integer; }
	partner_key "widget/parameter" { type=string; }
	description "widget/parameter" { type=string; }
	comment "widget/parameter" { type=string; }

	sql = "	declare object stepinfo;

		-- Look up user's partner ID
		select
		    :stepinfo:collab = :p_partner_key
		from
		    /apps/kardia/data/Kardia_DB/p_staff/rows
		where
		    :p_kardia_login = user_name()
		;

		-- Find what the most recent step is for this particular engagement
		select
		    :stepinfo:laststep = :pe:e_step_id,
		    :stepinfo:lasthist = :pe:e_hist_id,
		    :stepinfo:lastseq = :s:e_step_sequence,
		    :stepinfo:lastdesc = :pe:e_desc,
		    :stepinfo:lastcomm = :pe:e_comments
		from
		    /apps/kardia/data/Kardia_DB/e_partner_engagement/rows pe,
		    /apps/kardia/data/Kardia_DB/e_engagement_step/rows s
		where
		    :pe:p_partner_key = :parameters:partner_key and
		    :pe:e_engagement_id = :parameters:engagement_id and
		    :s:e_track_id = :pe:e_track_id and
		    :s:e_step_id = :pe:e_step_id and
		    :pe:e_completion_status = 'I' and
		    :pe:e_is_archived = 0
		order by
		    :s:e_step_sequence desc
		limit
		    1
		;

		-- Didn't find a recent step?
		select
		    :stepinfo:laststep = :pe:e_step_id,
		    :stepinfo:lasthist = :pe:e_hist_id,
		    :stepinfo:lastseq = :s:e_step_sequence,
		    :stepinfo:lastdesc = :pe:e_desc,
		    :stepinfo:lastcomm = :pe:e_comments
		from
		    /apps/kardia/data/Kardia_DB/e_partner_engagement/rows pe,
		    /apps/kardia/data/Kardia_DB/e_engagement_step/rows s
		where
		    :pe:p_partner_key = :parameters:partner_key and
		    :pe:e_engagement_id = :parameters:engagement_id and
		    :s:e_track_id = :pe:e_track_id and
		    :s:e_step_id = :pe:e_step_id and
		    :pe:e_is_archived = 0 and
		    :stepinfo:lastdesc is null
		order by
		    :s:e_step_sequence desc
		limit
		    1
		;

		-- Determine the current step ID to use (either specified or next)
		select
		    :stepinfo:step = :e_step_id
		from
		    /apps/kardia/data/Kardia_DB/e_engagement_step/rows s
		where
		    :s:e_track_id = :parameters:track_id and
		    (:stepinfo:lastseq is null or :s:e_step_sequence > :stepinfo:lastseq or :parameters:step_id is not null) and
		    (:parameters:step_id is null or :s:e_step_id = :parameters:step_id)
		order by
		    :s:e_step_sequence asc
		limit
		    1
		;

		-- Get current history/engagement ID if available
		select
		    :stepinfo:hist = :e_hist_id,
		    :stepinfo:eng = :e_engagement_id
		from
		    /apps/kardia/data/Kardia_DB/e_partner_engagement/rows
		where
		    :p_partner_key = :parameters:partner_key and
		    :e_engagement_id = :parameters:engagement_id and
		    :e_track_id = :parameters:track_id and
		    :e_step_id = :stepinfo:step and
		    :e_completion_status = 'I'
		limit
		    1
		;

		-- Do we need to create the partner engagement record?  We
		-- carry over the e_desc but not the e_comments field.
		insert
		    /apps/kardia/data/Kardia_DB/e_partner_engagement/rows
		select
		    p_partner_key = :parameters:partner_key,
		    e_engagement_id = :parameters:engagement_id,
		    e_track_id = :parameters:track_id,
		    e_step_id = :stepinfo:step,
		    e_is_archived = 0,
		    e_completion_status = 'I',
		    e_desc = isnull(:parameters:description, :stepinfo:lastdesc),
		    e_comments = :parameters:comment,
		    e_start_date = getdate(),
		    e_started_by = :stepinfo:collab,
		    s_date_created = getdate(),
		    s_created_by = user_name(),
		    s_date_modified = getdate(),
		    s_modified_by = user_name()
		on duplicate
		    :p_partner_key,
		    :e_engagement_id,
		    :e_track_id,
		    :e_step_id
		update set
		    :e_desc = isnull(:parameters:description, :e_desc),
		    :e_comments = isnull(:parameters:comment, :e_comments),
		    :e_completion_status = 'I',
		    :e_completion_date = null,
		    :e_completed_by = null,
		    :e_exited_date = null,
		    :e_exited_by = null,
		    :s_date_modified = getdate(),
		    :s_modified_by = user_name()
		;

		-- Get the new engagement ID and history ID, if just created.
		select
		    :stepinfo:hist = isnull(:stepinfo:hist, :__inserted:e_hist_id),
		    :stepinfo:eng = isnull(:stepinfo:eng, isnull(:parameters:engagement_id, :__inserted:e_engagement_id))
		;

		-- Create the engagement requirement items for the step
		insert
		    /apps/kardia/data/Kardia_DB/e_partner_engagement_req/rows
		select
		    :e:p_partner_key,
		    :e:e_engagement_id,
		    :e:e_hist_id,
		    :e:e_track_id,
		    :e:e_step_id,
		    :sr:e_req_id,
		    e_req_completion_status = 'I',
		    :sr:e_req_name,
		    :sr:e_due_days_from_step,
		    :sr:e_due_days_from_req,
		    :sr:e_due_days_from_req_id,
		    :sr:e_req_whom,
		    :sr:e_req_doc_type_id,
		    :sr:e_req_waivable,
		    :sr:e_is_active,
		    :sr:e_req_sequence,
		    s_date_created = getdate(),
		    s_created_by = user_name(),
		    s_date_modified = getdate(),
		    s_modified_by = user_name()
		from
		    /apps/kardia/data/Kardia_DB/e_partner_engagement/rows e,
		    /apps/kardia/data/Kardia_DB/e_engagement_step_req/rows sr
		where
		    :e:e_completion_status = 'I' and
		    :sr:e_track_id = :e:e_track_id and
		    :sr:e_step_id = :e:e_step_id and
		    :e:p_partner_key = :parameters:partner_key and
		    :e:e_engagement_id = :stepinfo:eng and
		    :e:e_hist_id = :stepinfo:hist
		;

		-- Close out the previous step
		update
		    /apps/kardia/data/Kardia_DB/e_partner_engagement/rows e
		set
		    :e_completion_status = 'C',
		    :e_completion_date = getdate(),
		    :e_completed_by = :stepinfo:collab,
		    :s_date_modified = getdate(),
		    :s_modified_by = user_name()
		where
		    :e:p_partner_key = :parameters:partner_key and
		    :e:e_engagement_id = :stepinfo:eng and
		    :e:e_hist_id = :stepinfo:lasthist
		;

		-- Remove unneeded (but automatically-added) collaborators
		delete from
		    identity /apps/kardia/data/Kardia_DB/e_collaborator/rows c,
		    /apps/kardia/data/Kardia_DB/e_engagement_step_collab/rows sc
		where
		    :sc:e_track_id = :parameters:track_id and
		    :sc:e_step_id = :stepinfo:laststep and
		    :c:p_partner_key = :parameters:partner_key and
		    :c:e_collaborator = :sc:p_collab_partner_key and
		    :c:e_collab_type_id = :sc:e_collab_type_id and
		    :c:e_is_automatic = 1
		;

		-- Add new collaborators
		insert
		    /apps/kardia/data/Kardia_DB/e_collaborator/rows
		select
		    e_collaborator = :sc:p_collab_partner_key,
		    p_partner_key = :parameters:partner_key,
		    e_collab_type_id = :sc:e_collab_type_id,
		    e_collaborator_status = 'A',
		    e_is_automatic = 1,
		    s_date_created = getdate(),
		    s_created_by = user_name(),
		    s_date_modified = getdate(),
		    s_modified_by = user_name()
		from
		    /apps/kardia/data/Kardia_DB/e_engagement_step_collab/rows sc
		where
		    :sc:e_track_id = :parameters:track_id and
		    :sc:e_step_id = :stepinfo:step
		;

		select
		    ret_step_id = :stepinfo:step,
		    ret_engagement_id = :stepinfo:eng,
		    ret_hist_id = :stepinfo:hist,
		    ret_track_id = :parameters:track_id,
		    ret_partner_key = :parameters:partner_key
		";
	replicasize=2;
	readahead=2;
	autoquery=never;

	on_endquery "widget/connector" { event=EndQuery; target=track_logic; action=InitStepDone; partner_key=runclient(:InitStep_osrc:ret_partner_key); engagement_id=runclient(:InitStep_osrc:ret_engagement_id); step_id=runclient(:InitStep_osrc:ret_step_id); hist_id=runclient(:InitStep_osrc:ret_hist_id); track_id=runclient(:InitStep_osrc:ret_track_id); }
	}

    // Cancel a step (and thus a track)
    CancelStep "widget/component-decl-action" { }
    CancelStepDone "widget/component-decl-event" { }
    do_CancelStep "widget/connector"
	{
	event=CancelStep;
	target=CancelStep_osrc;
	action=QueryParam;
	event_all_params=1;
	}
    CancelStep_osrc "widget/osrc"
	{
	ctrack_id "widget/parameter" { param_name=track_id; type=integer; }
	cstep_id "widget/parameter" { param_name=step_id; type=integer; }
	cengagement_id "widget/parameter" { param_name=engagement_id; type=integer; }
	cpartner_key "widget/parameter" { param_name=partner_key; type=string; }
	ccomment "widget/parameter" { param_name=comment; type=string; }

	sql = "	declare object stepinfo;

		-- Look up user's partner ID
		select
		    :stepinfo:collab = :p_partner_key
		from
		    /apps/kardia/data/Kardia_DB/p_staff/rows
		where
		    :p_kardia_login = user_name()
		;

		-- Close out the step
		update
		    /apps/kardia/data/Kardia_DB/e_partner_engagement/rows e
		set
		    :e_completion_status = 'X',
		    :e_exited_date = getdate(),
		    :e_exited_by = :stepinfo:collab,
		    :e_comments = isnull(:parameters:comment, :e_comments),
		    :s_date_modified = getdate(),
		    :s_modified_by = user_name()
		where
		    :e:p_partner_key = :parameters:partner_key and
		    :e:e_engagement_id = :parameters:engagement_id and
		    :e:e_track_id = :parameters:track_id and
		    :e:e_step_id = :parameters:step_id and
		    :e:e_completion_status = 'I'
		;

		-- Remove unneeded (but automatically-added) collaborators
		delete from
		    identity /apps/kardia/data/Kardia_DB/e_collaborator/rows c,
		    /apps/kardia/data/Kardia_DB/e_engagement_step_collab/rows sc
		where
		    :sc:e_track_id = :parameters:track_id and
		    :sc:e_step_id = :parameters:step_id and
		    :c:p_partner_key = :parameters:partner_key and
		    :c:e_collaborator = :sc:p_collab_partner_key and
		    :c:e_collab_type_id = :sc:e_collab_type_id and
		    :c:e_is_automatic = 1
		";
	replicasize=2;
	readahead=2;
	autoquery=never;

	on_cancelendquery "widget/connector" { event=EndQuery; target=track_logic; action=InitStepDone; partner_key=runclient(:CancelStep_osrc:partner_key); engagement_id=runclient(:CancelStep_osrc:engagement_id); step_id=runclient(:CancelStep_osrc:step_id); track_id=runclient(:CancelStep_osrc:track_id); }
	}

    // Archive an engagement
    Archive "widget/component-decl-action" { }
    ArchiveDone "widget/component-decl-event" { }
    do_Archive "widget/connector"
	{
	event=Archive;
	target=Archive_osrc;
	action=QueryParam;
	event_all_params=1;
	}
    Archive_osrc "widget/osrc"
	{
	atrack_id "widget/parameter" { param_name=track_id; type=integer; }
	aengagement_id "widget/parameter" { param_name=engagement_id; type=integer; }
	apartner_key "widget/parameter" { param_name=partner_key; type=string; }

	sql = "	declare object stepinfo;

		-- Look up user's partner ID
		select
		    :stepinfo:collab = :p_partner_key
		from
		    /apps/kardia/data/Kardia_DB/p_staff/rows
		where
		    :p_kardia_login = user_name()
		;

		-- Find what the most recent step is for this particular engagement
		select
		    :stepinfo:laststep = :pe:e_step_id,
		    :stepinfo:lasthist = :pe:e_hist_id,
		    :stepinfo:lastseq = :s:e_step_sequence,
		    :stepinfo:lastdesc = :pe:e_desc,
		    :stepinfo:lastcomm = :pe:e_comments
		from
		    /apps/kardia/data/Kardia_DB/e_partner_engagement/rows pe,
		    /apps/kardia/data/Kardia_DB/e_engagement_step/rows s
		where
		    :pe:p_partner_key = :parameters:partner_key and
		    :pe:e_engagement_id = :parameters:engagement_id and
		    :s:e_track_id = :pe:e_track_id and
		    :s:e_step_id = :pe:e_step_id and
		    :pe:e_completion_status = 'I' and
		    :pe:e_is_archived = 0
		order by
		    :s:e_step_sequence desc
		limit
		    1
		;

		-- Remove unneeded (but automatically-added) collaborators
		delete from
		    identity /apps/kardia/data/Kardia_DB/e_collaborator/rows c,
		    /apps/kardia/data/Kardia_DB/e_engagement_step_collab/rows sc
		where
		    :sc:e_track_id = :parameters:track_id and
		    :sc:e_step_id = :stepinfo:laststep and
		    :c:p_partner_key = :parameters:partner_key and
		    :c:e_collaborator = :sc:p_collab_partner_key and
		    :c:e_collab_type_id = :sc:e_collab_type_id and
		    :c:e_is_automatic = 1
		;

		-- Close out the step
		update
		    /apps/kardia/data/Kardia_DB/e_partner_engagement/rows e
		set
		    :e_completion_status = 'X',
		    :e_exited_date = getdate(),
		    :e_exited_by = :stepinfo:collab,
		    :s_date_modified = getdate(),
		    :s_modified_by = user_name()
		where
		    :e:p_partner_key = :parameters:partner_key and
		    :e:e_engagement_id = :parameters:engagement_id and
		    :e:e_track_id = :parameters:track_id and
		    :e:e_step_id = :stepinfo:laststep and
		    :e:e_completion_status = 'I'
		;

		-- Archive it.
		update
		    /apps/kardia/data/Kardia_DB/e_partner_engagement/rows e
		set
		    :e_is_archived = 1
		where
		    :p_partner_key = :parameters:partner_key and
		    :e_engagement_id = :parameters:engagement_id and
		    :e_track_id = :parameters:track_id
		";   
	replicasize=2;
	readahead=2;
	autoquery=never;

	on_arcendquery "widget/connector" { event=EndQuery; target=track_logic; action=ArchiveDone; partner_key=runclient(:Archive_osrc:partner_key); engagement_id=runclient(:Archive_osrc:engagement_id); track_id=runclient(:Archive_osrc:track_id); }
	}

    // Delete a step (undo it)
    DeleteStep "widget/component-decl-action" { }
    DeleteStepDone "widget/component-decl-event" { }
    do_DeleteStep "widget/connector"
	{
	event=DeleteStep;
	target=DeleteStep_osrc;
	action=QueryParam;
	event_all_params=1;
	}
    DeleteStep_osrc "widget/osrc"
	{
	dtrack_id "widget/parameter" { param_name=track_id; type=integer; }
	dstep_id "widget/parameter" { param_name=step_id; type=integer; }
	dengagement_id "widget/parameter" { param_name=engagement_id; type=integer; }
	dpartner_key "widget/parameter" { param_name=partner_key; type=string; }

	sql = "	declare object stepinfo;

		-- Look up user's partner ID
		select
		    :stepinfo:collab = :p_partner_key
		from
		    /apps/kardia/data/Kardia_DB/p_staff/rows
		where
		    :p_kardia_login = user_name()
		;

		-- Find the history ID of the step to be deleted (fixme - pass this one in when we have it)
		select
		    :stepinfo:hist_id = :e:e_hist_id,
		    :stepinfo:status = :e:e_completion_status
		from
		    /apps/kardia/data/Kardia_DB/e_partner_engagement/rows e
		where
		    :e:p_partner_key = :parameters:partner_key and
		    :e:e_engagement_id = :parameters:engagement_id and
		    :e:e_track_id = :parameters:track_id and
		    :e:e_step_id = :parameters:step_id
		order by
		    :e:e_start_date desc
		limit
		    1
		;

		-- Remove any step requirements
		delete from
		    identity /apps/kardia/data/Kardia_DB/e_partner_engagement_req/rows er
		where
		    :er:p_partner_key = :parameters:partner_key and
		    :er:e_engagement_id = :parameters:engagement_id and
		    :er:e_track_id = :parameters:track_id and
		    :er:e_step_id = :parameters:step_id and
		    :er:e_hist_id = :stepinfo:hist_id
		;

		-- Remove the step
		delete from
		    identity /apps/kardia/data/Kardia_DB/e_partner_engagement/rows e
		where
		    :e:p_partner_key = :parameters:partner_key and
		    :e:e_engagement_id = :parameters:engagement_id and
		    :e:e_track_id = :parameters:track_id and
		    :e:e_step_id = :parameters:step_id and
		    :e:e_hist_id = :stepinfo:hist_id
		;

		-- Find out what the previously completed step was, and reactivate it
		select
		    :stepinfo:laststep = :e:e_hist_id
		from
		    /apps/kardia/data/Kardia_DB/e_partner_engagement/rows e
		where
		    :e:p_partner_key = :parameters:partner_key and
		    :e:e_engagement_id = :parameters:engagement_id and
		    :e:e_track_id = :parameters:track_id and
		    :e:e_completion_status = 'C'
		order by
		    :e:e_completion_date desc
		limit
		    1
		;
		update
		    /apps/kardia/data/Kardia_DB/e_partner_engagement/rows e
		set
		    :e:e_completion_status = 'I',
		    :e:e_completion_date = null,
		    :e:e_completed_by = null
		where
		    :e:p_partner_key = :parameters:partner_key and
		    :e:e_engagement_id = :parameters:engagement_id and
		    :e:e_track_id = :parameters:track_id and
		    :e:e_completion_status = 'C' and
		    :e:e_hist_id = :stepinfo:laststep and
		    :stepinfo:status = 'I'
		;

		-- Remove unneeded (but automatically-added) collaborators
		delete from
		    identity /apps/kardia/data/Kardia_DB/e_collaborator/rows c,
		    /apps/kardia/data/Kardia_DB/e_engagement_step_collab/rows sc
		where
		    :sc:e_track_id = :parameters:track_id and
		    :sc:e_step_id = :parameters:step_id and
		    :c:p_partner_key = :parameters:partner_key and
		    :c:e_collaborator = :sc:p_collab_partner_key and
		    :c:e_collab_type_id = :sc:e_collab_type_id and
		    :c:e_is_automatic = 1
		";
	replicasize=2;
	readahead=2;
	autoquery=never;

	on_delendquery "widget/connector" { event=EndQuery; target=track_logic; action=DeleteStepDone; event_all_params=1; }
	}

    // Re-sync Requirements from the master list
    ResyncStep "widget/component-decl-action" { }
    ResyncStepDone "widget/component-decl-event" { }
    do_ResyncStep "widget/connector"
	{
	event=ResyncStep;
	target=ResyncStep_osrc;
	action=QueryParam;
	event_all_params=1;
	}
    ResyncStep_osrc "widget/osrc"
	{
	rtrack_id "widget/parameter" { param_name=track_id; type=integer; }
	rstep_id "widget/parameter" { param_name=step_id; type=integer; }
	rengagement_id "widget/parameter" { param_name=engagement_id; type=integer; }
	rpartner_key "widget/parameter" { param_name=partner_key; type=string; }

	sql = "	declare object stepinfo;

		-- Look up user's partner ID
		select
		    :stepinfo:collab = :p_partner_key
		from
		    /apps/kardia/data/Kardia_DB/p_staff/rows
		where
		    :p_kardia_login = user_name()
		;

		-- Find the history ID of the step to be resynced (fixme - pass this one in when we have it)
		select
		    :stepinfo:hist_id = :e:e_hist_id,
		    :stepinfo:status = :e:e_completion_status
		from
		    /apps/kardia/data/Kardia_DB/e_partner_engagement/rows e
		where
		    :e:p_partner_key = :parameters:partner_key and
		    :e:e_engagement_id = :parameters:engagement_id and
		    :e:e_track_id = :parameters:track_id and
		    :e:e_step_id = :parameters:step_id
		order by
		    :e:e_start_date desc
		limit
		    1
		;

		-- Resync from the master requirements list
		insert
		    /apps/kardia/data/Kardia_DB/e_partner_engagement_req/rows
		select
		    :e:p_partner_key,
		    :e:e_engagement_id,
		    :e:e_hist_id,
		    :e:e_track_id,
		    :e:e_step_id,
		    :sr:e_req_id,
		    e_req_completion_status = 'I',
		    :sr:e_req_name,
		    :sr:e_due_days_from_step,
		    :sr:e_due_days_from_req,
		    :sr:e_due_days_from_req_id,
		    :sr:e_req_whom,
		    :sr:e_req_doc_type_id,
		    :sr:e_req_waivable,
		    :sr:e_is_active,
		    :sr:e_req_sequence,
		    s_date_created = getdate(),
		    s_created_by = user_name(),
		    s_date_modified = getdate(),
		    s_modified_by = user_name()
		from
		    /apps/kardia/data/Kardia_DB/e_partner_engagement/rows e,
		    /apps/kardia/data/Kardia_DB/e_engagement_step_req/rows sr
		where
		    :e:e_completion_status = 'I' and
		    :sr:e_track_id = :e:e_track_id and
		    :sr:e_step_id = :e:e_step_id and
		    :e:p_partner_key = :parameters:partner_key and
		    :e:e_engagement_id = :parameters:engagement_id and
		    :e:e_hist_id = :stepinfo:hist_id
		on duplicate
		    :p_partner_key,
		    :e_engagement_id,
		    :e_hist_id,
		    :e_track_id,
		    :e_step_id,
		    :e_req_id
		update set
		    :s_modified_by = user_name() IF MODIFIED,
		    :s_date_modified = getdate() IF MODIFIED,
		    :e_is_active = :sr:e_is_active,
		    :e_req_sequence = :sr:e_req_sequence,
		    :e_req_name = :sr:e_req_name,
		    :e_due_days_from_step = :sr:e_due_days_from_step,
		    :e_due_days_from_req = :sr:e_due_days_from_req,
		    :e_due_days_from_req_id = :sr:e_due_days_from_req_id,
		    :e_req_whom = :sr:e_req_whom,
		    :e_req_doc_type_id = :sr:e_req_doc_type_id,
		    :e_req_waivable = :sr:e_req_waivable
		";
	replicasize=2;
	readahead=2;
	autoquery=never;

	on_resendquery "widget/connector" { event=EndQuery; target=track_logic; action=ResyncStepDone; event_all_params=1; }
	}
    }

